<?php

namespace Botble\{Plugin}\Http\Controllers;

use Botble\Base\Events\BeforeEditContentEvent;
use Botble\{Plugin}\Http\Requests\{Name}Request;
use Botble\{Plugin}\Repositories\Interfaces\{Name}Interface;
use Botble\Base\Http\Controllers\BaseController;
use Illuminate\Http\Request;
use Exception;
use Botble\{Plugin}\Tables\{Name}Table;
use Botble\Base\Events\CreatedContentEvent;
use Botble\Base\Events\DeletedContentEvent;
use Botble\Base\Events\UpdatedContentEvent;
use Botble\Base\Http\Responses\BaseHttpResponse;
use Botble\{Plugin}\Forms\{Name}Form;
use Botble\Base\Forms\FormBuilder;

class {Name}Controller extends BaseController
{
    /**
     * @var {Name}Interface
     */
    protected ${+name}Repository;

    /**
     * {Name}Controller constructor.
     * @param {Name}Interface ${+name}Repository
     * @author Sang Nguyen
     */
    public function __construct({Name}Interface ${+name}Repository)
    {
        $this->{+name}Repository = ${+name}Repository;
    }

    /**
     * Display all {names}
     * @param {Name}Table $dataTable
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @author Sang Nguyen
     * @throws \Throwable
     */
    public function getList({Name}Table $table)
    {

        page_title()->setTitle(trans('plugins/{-plugin}::{-name}.name'));

        return $table->renderTable();
    }

    /**
     * @param FormBuilder $formBuilder
     * @return string
     * @author Sang Nguyen
     */
    public function getCreate(FormBuilder $formBuilder)
    {
        page_title()->setTitle(trans('plugins/{-plugin}::{-name}.create'));

        return $formBuilder->create({Name}Form::class)->renderForm();
    }

    /**
     * Insert new {Name} into database
     *
     * @param {Name}Request $request
     * @return BaseHttpResponse
     * @author Sang Nguyen
     */
    public function postCreate({Name}Request $request, BaseHttpResponse $response)
    {
        ${name} = $this->{+name}Repository->createOrUpdate($request->input());

        event(new CreatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${name}));

        return $response
            ->setPreviousUrl(route('{name}.list'))
            ->setNextUrl(route('{name}.edit', ${name}->id))
            ->setMessage(trans('core/base::notices.create_success_message'));
    }

    /**
     * Show edit form
     *
     * @param $id
     * @param Request $request
     * @param FormBuilder $formBuilder
     * @return string
     * @author Sang Nguyen
     */
    public function getEdit($id, FormBuilder $formBuilder, Request $request)
    {
        ${name} = $this->{+name}Repository->findOrFail($id);

        event(new BeforeEditContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${name}));

        page_title()->setTitle(trans('plugins/{-plugin}::{-name}.edit') . ' #' . $id);

        return $formBuilder->create({Name}Form::class, ['model' => ${name}])->renderForm();
    }

    /**
     * @param $id
     * @param {Name}Request $request
     * @return BaseHttpResponse
     * @author Sang Nguyen
     */
    public function postEdit($id, {Name}Request $request, BaseHttpResponse $response)
    {
        ${name} = $this->{+name}Repository->findOrFail($id);

        ${name}->fill($request->input());

        $this->{+name}Repository->createOrUpdate(${name});

        event(new UpdatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${name}));

        return $response
            ->setPreviousUrl(route('{name}.list'))
            ->setMessage(trans('core/base::notices.update_success_message'));
    }

    /**
     * @param $id
     * @param Request $request
     * @return BaseHttpResponse
     * @author Sang Nguyen
     */
    public function getDelete(Request $request, $id, BaseHttpResponse $response)
    {
        try {
            ${name} = $this->{+name}Repository->findOrFail($id);

            $this->{+name}Repository->delete(${name});

            event(new DeletedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${name}));

            return $response->setMessage(trans('core/base::notices.delete_success_message'));
        } catch (Exception $exception) {
            return $response
                ->setError()
                ->setMessage(trans('core/base::notices.cannot_delete'));
        }
    }

    /**
     * @param Request $request
     * @param BaseHttpResponse $response
     * @return BaseHttpResponse
     * @author Sang Nguyen
     * @throws Exception
     */
    public function postDeleteMany(Request $request, BaseHttpResponse $response)
    {
        $ids = $request->input('ids');
        if (empty($ids)) {
            return $response
                ->setError()
                ->setMessage(trans('core/base::notices.no_select'));
        }

        foreach ($ids as $id) {
            ${name} = $this->{+name}Repository->findOrFail($id);
            $this->{+name}Repository->delete(${name});
            event(new DeletedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${name}));
        }

        return $response->setMessage(trans('core/base::notices.delete_success_message'));
    }
}
